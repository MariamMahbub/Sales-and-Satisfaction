# -*- coding: utf-8 -*-
"""cse303-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10z-aUA5GWzjTMa7ef6UOptMeA8mmNRno
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""# Importing Important Libaries"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_rel, chi2_contingency

"""# Reading the dataset"""

df = pd.read_csv('/kaggle/input/sales-and-satisfaction/Sales_with_NaNs_v1.3.csv')

"""# Checking Dataset Balance"""

def check_balance_pie(column_name):
    print(f"Distribution of '{column_name}':")
    counts = df[column_name].value_counts()
    print(counts)
    print("\nProportions:")
    proportions = counts / counts.sum()
    print(proportions)

    # pie chart
    plt.figure(figsize=(8, 6))
    plt.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
    plt.title(f"Distribution of '{column_name}'")
    plt.axis('equal')  # Equal aspect ratio ensures the pie chart is a circle.
    plt.show()

check_balance_pie('Group')
check_balance_pie('Customer_Segment')
check_balance_pie('Purchase_Made')

"""
# Checking columns based on data type"""

def classify_columns(dataframe):
    column_info = {}
    for column in dataframe.columns:
        # Check data type
        dtype = dataframe[column].dtype
        # Classify column
        if pd.api.types.is_numeric_dtype(dataframe[column]):
            column_type = 'Numerical'
        elif pd.api.types.is_categorical_dtype(dataframe[column]) or dataframe[column].nunique() < 20:
            column_type = 'Categorical'
        else:
            column_type = 'Other'
        column_info[column] = column_type


    print("Column Classification:")
    for col, col_type in column_info.items():
        print(f"{col}: {col_type}")

classify_columns(df)

"""# Calculating frequency and percentage for categorical and discrete columns"""

def analyze_categorical_columns_with_plots(dataframe):
    for column in dataframe.columns:
        if dataframe[column].dtype == 'object' or dataframe[column].nunique() < 20:
            print(f"\nAnalysis for Column: {column}")


            frequency = dataframe[column].value_counts()
            percentage = dataframe[column].value_counts(normalize=True) * 100
            result = pd.DataFrame({
                'Frequency': frequency,
                'Percentage (%)': percentage
            })
            print(result)
            print("-" * 40)

            # Pie chart
            plt.figure(figsize=(6, 6))
            plt.pie(frequency, labels=frequency.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
            plt.title(f"Pie Chart of {column}")
            plt.axis('equal')
            plt.show()


analyze_categorical_columns_with_plots(df)

"""# Calculating and plot statistics for numerical columns"""

# Function to calculate and plot statistics for numerical columns
def analyze_and_plot_numerical_columns(dataframe):
    print("Analysis of Numerical Columns:")

    # Create a figure for the plots
    plt.figure(figsize=(12, 8))

    for column in dataframe.columns:
        # Check if the column is numerical
        if pd.api.types.is_numeric_dtype(dataframe[column]):
            # Calculate statistics
            mean_val = dataframe[column].mean()
            median_val = dataframe[column].median()
            variance_val = dataframe[column].var()
            std_dev_val = dataframe[column].std()

            # Print statistics
            print(f"\nStatistics for Column: {column}")
            print(f"Mean: {mean_val:.2f}")
            print(f"Median: {median_val:.2f}")
            print(f"Variance: {variance_val:.2f}")
            print(f"Standard Deviation: {std_dev_val:.2f}")
            print("-" * 40)

            # Plot the statistics for the column
            plt.plot([1, 2, 3, 4], [mean_val, median_val, variance_val, std_dev_val], marker='o', label=column)

    # Set up plot
    plt.title("Statistics for Numerical Columns")
    plt.xlabel("Statistic Type")
    plt.ylabel("Value")
    plt.xticks([1, 2, 3, 4], ['Mean', 'Median', 'Variance', 'Standard Deviation'])
    plt.legend(loc='upper left')
    plt.grid(True)
    plt.show()

# Call the function
analyze_and_plot_numerical_columns(df)

## Function to encode the 'Group' column
def encode_group_column(dataframe):
    le = LabelEncoder()  # Initialize the label encoder
    dataframe['Group'] = le.fit_transform(dataframe['Group'])  # Encode 'Group' column
    return dataframe

# Encode 'Group' column
df_encoded = encode_group_column(df)

# Calculate the correlation between the 'Group' column and other numerical columns
correlation = df_encoded.corr()

# Extract the correlation of 'Group' with all other numerical columns
group_correlation = correlation['Group']

# Plot the correlation with 'Group'
plt.figure(figsize=(8, 6))
sns.barplot(x=group_correlation.index, y=group_correlation.values, palette='coolwarm')
plt.title("Correlation Between 'Group' and Other Numerical Columns")
plt.xlabel("Columns")
plt.ylabel("Correlation Coefficient")
plt.xticks(rotation=45)
plt.show()

def plot_correlation_heatmap(dataframe):
    # Select only numerical columns
    numerical_columns = dataframe.select_dtypes(include=['number']).columns

    # Calculate the correlation matrix for numerical columns
    corr_matrix = dataframe[numerical_columns].corr()

    # Plot the heatmap using seaborn
    plt.figure(figsize=(10, 8))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, vmin=-1, vmax=1)

    # Set the title of the plot
    plt.title("Correlation Heatmap")
    plt.show()

plot_correlation_heatmap(df)

import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

def encode_categorical_columns(dataframe):
    le = LabelEncoder()  # Initialize the label encoder
    categorical_columns = dataframe.select_dtypes(include=['object']).columns  # Identify categorical columns

    for column in categorical_columns:
        dataframe[column] = le.fit_transform(dataframe[column])  # Apply label encoding

    return dataframe


df_encoded = encode_categorical_columns(df)


def plot_correlation_heatmap(dataframe):
    corr_matrix = dataframe.corr()

    plt.figure(figsize=(12, 8))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, vmin=-1, vmax=1)

    plt.title("Correlation Heatmap (Including Categorical Data)")
    plt.show()


plot_correlation_heatmap(df_encoded)